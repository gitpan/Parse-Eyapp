# File TSPostfix3.eyp. To use it:
# eyapp TSPostfix3.eyp; usetspostfix3.pl
%right  '='
%left   '-' '+'
%left   '*' '/'
%left   NEG

%{
  use Data::Dumper;
  $Data::Dumper::Indent = 1;
  $Data::Dumper::Deepcopy = 1;
  $Data::Dumper::Deparse = 1;
%}

%metatree


%defaultaction { 
  if (@_==2) {  # NUM and VAR
    $lhs->{t} = $_[1]->{attr};
    return 
  }
  if (@_==4) { # binary operations
    $lhs->{t} = "$_[1]->{t} $_[3]->{t} $_[2]->{attr}";
    return  
  }
  die "Fatal Error. Unexpected input. Numargs = ".scalar(@_)."\n".Parse::Eyapp::Node->str(@_);
}

%%
line: %name PROG
       exp <%name EXP + ';'> 
         { @{$lhs->{t}} = map { $_->{t}} ($_[1]->children()); }
         
;

exp:        %name NUM NUM                
        |   %name VAR VAR               
        |   %name ASSIGN VAR '=' exp  {  $lhs->{t} = "$_[1]->{attr} $_[3]->{t} ="; }      
        |   %name PLUS   exp '+' exp         
        |   %name MINUS  exp '-' exp        
        |   %name TIMES  exp '*' exp       
        |   %name DIV    exp '/' exp      
        |   %name NEG    '-' exp %prec NEG { $_[0]->{t} = "$_[2]->{t} NEG" }
        |   '(' exp ')' %begin { $_[2] }      
;

%%

sub _Error {
        exists $_[0]->YYData->{ERRMSG}
    and do {
        print $_[0]->YYData->{ERRMSG};
        delete $_[0]->YYData->{ERRMSG};
        return;
    };
    my($token)=$_[0]->YYCurval;

    my($what)= $token ? "input: '$token'" : "end of input";

    die "Syntax error near $what.\n";
}

my $x; # Used for input

sub _Lexer {
    my($parser)=shift;

    defined($x) or  return('',undef);

    $x =~ s/^\s+//;

    $x =~ s/^([0-9]+(?:\.[0-9]+)?)//   and return('NUM',$1);
    $x =~ s/^([A-Za-z][A-Za-z0-9_]*)// and return('VAR',$1);
    $x =~ s/^(.)//s                    and return($1,$1);
}

sub Run {
    my($self)=shift;
    $x = "a=-b*3\n";
    print $x;
    my $tree = $self->YYParse( yylex => \&_Lexer, yyerror => \&_Error,
      #yydebug => 0xFF
    );

    $Parse::Eyapp::Node::INDENT = 2;
    print $tree->str."\n";
    $tree->translation_scheme();
    *NUM::info = *VAR::info = *PLUS::info = *MINUS::info = *TIMES::info = *DIV::info 
    = *NEG::info = *ASSIGN::info 
    = sub { $_[0]{t} };
    print $tree->str."\n";
    {
      local $" = ";";
      print "Translation:\n@{$tree->{t}}\n";
    }

}

sub TERMINAL::info { $_[0]{attr} }
