# GiveNamesToCalc.eyp
%right  '='
%left   '-' '+'
%left   '*' '/'
%left   NEG
%right  '^'

%tree bypass

%{
use base q{Tail};

sub exp_is_NUM::info {
  my $self = shift;

  $self->{attr}[0];
}

*exp_is_VAR::info = *var_is_VAR::info = \&exp_is_NUM::info;
%}

%namingscheme { 
  #Receives a Parse::Eyapp object describing the grammar
  my $self = shift;

  $self->tokennames(
    '=' => 'ASSIGN',
    '+' => 'PLUS',
    '*' => 'TIMES',
    '-' => 'MINUS',
    '/' => 'DIV',
    '^' => 'EXP',
  );

  # returns the handler that will give names 
  # to the right hand sides
  \&give_token_name; 
}
%%

line:       
    exp 
;

exp:
    NUM                
  | VAR                
  | var '=' exp        
  | exp '+' exp        
  | exp '-' exp        
  | exp '*' exp        
  | exp '/' exp        
  | %no bypass exp_is_NEG
     '-' exp %prec NEG  
  | exp '^' exp        
  | '(' exp ')'        
;

var:
    VAR
;
%%

unless (caller) {
  my $t = __PACKAGE__->main(@ARGV);
  print $t->str."\n";
}

