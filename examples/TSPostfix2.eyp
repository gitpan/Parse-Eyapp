# File TSPostfix2.eyp
%right  '='
%left   '-' '+'
%left   '*' '/'
%left   NEG

%{
  use Data::Dumper;
  $Data::Dumper::Indent = 1;
  $Data::Dumper::Deepcopy = 1;
  #$Data::Dumper::Deparse = 1;
  use IO::Interactive qw(interactive);
%}

%metatree

%defaultaction { 
  if (@_==4) { # binary operations: 4 = lhs, left, operand, right
    $lhs->{t} = "$_[1]->{t} $_[3]->{t} $_[2]->{attr}";
    return  
  }
  die "Fatal Error. Unexpected input\n".Dumper(@_);
}

%%
line: %name PROG
       exp <%name EXP + ';'> 
         { @{$lhs->{t}} = map { $_->{t}} ($lhs->child(0)->Children()); }
         
;

exp:        NUM         { $lhs->{t} = $_[1]->{attr}; }    
        |   VAR         { $lhs->{t} = $_[1]->{attr}; } 
        |   VAR '=' exp { $lhs->{t} = "$_[1]->{attr} $_[3]->{t} =" }
        |   exp '+' exp         
        |   exp '-' exp        
        |   exp '*' exp       
        |   exp '/' exp      
        |   '-' exp %prec NEG { $_[0]->{t} = "$_[2]->{t} NEG" }
        |   '(' exp ')' %begin { $_[2] }      
;

%%

sub _Error {
    my($token)=$_[0]->YYCurval;

    my($what)= $token ? "input: '$token'" : "end of input";
    die "Syntax error near $what.\n";
}

my $x; # Used for input

sub _Lexer {
    my($parser)=shift;

    $x =~ s/^\s+//;
    return('',undef) if $x eq '';


    $x =~ s/^([0-9]+(?:\.[0-9]+)?)//   and return('NUM',$1);
    $x =~ s/^([A-Za-z][A-Za-z0-9_]*)// and return('VAR',$1);
    $x =~ s/^(.)//s                    and return($1,$1);
}

sub Run {
    my($self)=shift;
    $x = <>;
    my $tree = $self->YYParse( yylex => \&_Lexer, yyerror => \&_Error,
      #yydebug => 0xFF
    );

    print Dumper($tree);
    $tree->translation_scheme();
    print Dumper($tree);
    {
      local $" = ";";
      print "Translation:\n@{$tree->{t}}\n";
    }
}

