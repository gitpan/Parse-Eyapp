%{
use Data::Dumper;
%}
%semantic token 'a' 'b' 'c'
%tree
%%
S:   
      (%name AS 'a' S )'b' 
         { 
            print "S -> ('a' S )'b'\n";
            print "Atributo del Primer Símbolo:\n".Dumper($_[1]);
            print "Atributo del Segundo símbolo: $_[2]\n"; 
            $_[0]->YYBuildAST(@_[1..$#_]);
         } 
    | 'c'   
        { 
          print "S -> 'c'\n"; 
          my $r = Parse::Eyapp::Node->new(qw(C(TERMINAL)), sub { $_[1]->attr('c') }) ;
          print Dumper($r);
          $r;
        }          
;
%%

sub _Error {
        exists $_[0]->YYData->{ERRMSG}
    and do {
        print $_[0]->YYData->{ERRMSG};
        delete $_[0]->YYData->{ERRMSG};
        return;
    };
    print "Syntax error.\n";
}

sub _Lexer {
    my($parser)=shift;

        $parser->YYData->{INPUT}
    or  $parser->YYData->{INPUT} = <STDIN>
    or  return('',undef);

    $parser->YYData->{INPUT}=~s/^[ \t\n]//;

    for ($parser->YYData->{INPUT}) {
        s/^(.)//s and return($1,$1);
    }
}

sub Run {
    my($self)=shift;
    $Data::Dumper::Indent = 1;
    $self->YYParse( yylex => \&_Lexer, yyerror => \&_Error 
      #, yydebug => 0x1F 
    );
}
