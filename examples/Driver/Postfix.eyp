# File examples/eyapplanguageref/Postfix.eyp
%right  '='
%left   '-' '+'
%left   '*' '/'
%left   NEG

%defaultaction { return  "$left $right $op"; }

%%
line: $exp  { print "$exp\n" }
;

exp:        $NUM  { $NUM }            
        |   $VAR  { $VAR }            
        |   VAR.left '='.op exp.right         
        |   exp.left '+'.op exp.right         
        |   exp.left '-'.op exp.right        
        |   exp.left '*'.op exp.right       
        |   exp.left '/'.op exp.right      
        |   '-' $exp %prec NEG { "$exp NEG" }
        |   '(' $exp ')' { $exp }      
;

%%

use base q{Parse::Eyapp::TailSupport};

__PACKAGE__->lexer(sub {
    my $parser = shift;

    for (${$parser->input}) {
      s/^\s+//;

      s/^([0-9]+(?:\.[0-9]+)?)//   and return('NUM',$1);
      s/^([A-Za-z][A-Za-z0-9_]*)// and return('VAR',$1);
      s/^(.)//s                    and return($1,$1);
      $_ eq ''                     and return('',undef);
    }
  }
);

# Modulino
__PACKAGE__->main() unless caller();
