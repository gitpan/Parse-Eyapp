# CalcSimple.eyp
%right  '='
%left   '-' '+'
%left   '*' '/'
%left   NEG
%right  '^'
%{
my %s;
%}

%%
start: input { [ $_[1], \%s] }
;

input:  
    /* empty */     { [] }
  | input line  { push(@{$_[1]},$_[2]) if defined($_[2]); $_[1] }
;

line:       
  '\n'         { undef }
  | $exp '\n'  { print "$exp\n"; $exp }
  | error '\n' { $_[0]->YYErrok; undef }
;

exp:
    NUM
  | $VAR                    { $s{$VAR} }
  | VAR.x '=' exp.y         { $s{$x} = $y }
  | exp.x '+' exp.y         { $x + $y }
  | exp.x '-' exp.y         { $x - $y }
  | exp.x '*' exp.y         { $x * $y }
  | exp.x '^' exp.y         { $x ** $y }
  | exp.x '/' exp.y         
    {
      my $parser = shift;

           $y and return($x / $y);
       $parser->YYData->{ERRMSG}
         =   "Illegal division by zero.\n";
       $parser->YYError;
       undef
    }
  |   '-' $exp %prec NEG   
    { -$exp }
  |   '(' $exp ')'         
    { $exp }
;

%%

sub _Error {
  my $private = $_[0]->YYData;

      exists $private->{ERRMSG}
  and do {
      print $private->{ERRMSG};
      delete $private->{ERRMSG};
      return;
  };
  print "Syntax error.\n";
}

my $input;

sub _Lexer {
  my($parser)=shift;

  # topicalize $input
  for ($input) {
    s/^[ \t]//;      # skip whites
    return('',undef) unless $_;
    return('NUM',$1) if s{^([0-9]+(?:\.[0-9]+)?)}{};
    return('VAR',$1) if s/^([A-Za-z][A-Za-z0-9_]*)//;
    return($1,$1)    if s/^(.)//s;
  }

  return('',undef);
}

sub Run {
    my($self)=shift;

    $input = shift;
    return $self->YYParse( yylex => \&_Lexer, yyerror => \&_Error, 
                           #yydebug => 0xF 
                         );
}

